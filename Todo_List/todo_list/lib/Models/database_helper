import "package:flutter/material.dart";
import 'dart:io';
import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path_provider/path_provider.dart';

final String _tableWord = 'tasks',
    _text = 'text',
    _isCompleted = 'isCompleted',
    _time = 'time',
    _status = 'status',
    _date = 'date',
    _createdTime = 'createdTime',
    _deadline = 'deadline',
    _subtask = 'subtask';

class Task {
  int? id;
  bool isCompleted;
  String text, time, status;
  DateTime? date;
  DateTime createdTime;
  Text deadline;
  Task? subtask;

  Task(this.text, this.date, this.isCompleted, this.time, this.createdTime,
      this.status, this.deadline);

  Task.fromMap(Map<String, dynamic> map)
      : isCompleted = map[_isCompleted],
        text = map[_text],
        time = map[_time],
        date = map[_date],
        status = map[_status],
        createdTime = map[_createdTime],
        deadline = map[_deadline];

  Map<String, dynamic> toMap() {
    var map = <String, dynamic>{
      _text: 'text',
      _isCompleted: 'isCompleted',
      _time: 'time',
      _status: 'status',
      _date: 'date',
      _createdTime: 'createdTime',
      _deadline: 'deadline',
    };
    return map;
  }
}

class DatabaseHelper {
  static final _databaseName = "MyDatabase.db";
  static final _databaseVersion = 1;
  static Database? _database;
  Future<Database?> get database async {
    if (_database != null) return _database;
    _database = await _initDatabase();
    return _database;
  }

  _initDatabase() async {
    // The path_provider plugin gets the right directory for Android or iOS.
    Directory documentsDirectory = await getApplicationDocumentsDirectory();
    String path = join(documentsDirectory.path, _databaseName);
    // Open the database. Can also add an onUpdate callback parameter.
    return await openDatabase(path,
        version: _databaseVersion, onCreate: _onCreate);
  }

  Future _onCreate(Database db, int version) async {
    await db.execute('''
              CREATE TABLE $_tableWord (
                $_text TEXT NOT NULL,
                $_isCompleted BOOLEAN NOT NULL,
                $_time STRING OF TIME,
                $_status TEXT FOR STATE,
                $_date DATETIME,
                $_createdTime DATETIME NOT NULL,
                $_deadline TEXT NOT NULL,
              )
              ''');
  }

  Future<int> insert(Task task) async {
    Database? db = await database;
    int id = await db!.insert(_tableWord, task.toMap());
    return id;
  }

  Future<Task?> queryTask(int id) async {
    Database? db = await database;
    List<Map> maps = await db!.query(_tableWord,
        columns: [
          _tableWord,
          _text,
          _isCompleted,
          _time,
          _status,
          _date,
          _createdTime,
          _deadline
        ],
        where: '$_text = ?',
        whereArgs: [id]);
    if (maps.isNotEmpty) {
      return Task.fromMap(maps.first);
    }
    return null;
  }
}
